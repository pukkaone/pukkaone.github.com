<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.8.5">Jekyll</generator><link href="https://pukkaone.github.io/feed.xml" rel="self" type="application/atom+xml" /><link href="https://pukkaone.github.io/" rel="alternate" type="text/html" /><updated>2019-04-01T22:50:31-07:00</updated><id>https://pukkaone.github.io/feed.xml</id><title type="html">Software Developer’s Notebook</title><author><name>Chin Huang</name></author><entry><title type="html">Getting Started with GraphQL and Spring Boot</title><link href="https://pukkaone.github.io/2019/03/31/graphql-spring-boot-getting-started.html" rel="alternate" type="text/html" title="Getting Started with GraphQL and Spring Boot" /><published>2019-03-31T00:00:00-07:00</published><updated>2019-03-31T00:00:00-07:00</updated><id>https://pukkaone.github.io/2019/03/31/graphql-spring-boot-getting-started</id><content type="html" xml:base="https://pukkaone.github.io/2019/03/31/graphql-spring-boot-getting-started.html">&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In 2019, I reinvented &lt;a href=&quot;https://www.corba.org/&quot;&gt;Common Object Request Brokerage Architecture (CORBA)&lt;/a&gt;.
If you developed a distributed system in 1997, you might have built servers that accept network
requests by CORBA.
You defined the types and operations implemented by a server in Interface Definition Language (IDL).
An &lt;a href=&quot;https://docs.oracle.com/javase/8/docs/technotes/guides/idl/GShome.html&quot;&gt;IDL compiler&lt;/a&gt; generated
skeleton code for a server.
As an application developer, you added business logic to the skeleton code to complete the server
implementation.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I wrote &lt;a href=&quot;https://pukkaone.github.io/grapid/&quot;&gt;Grapid&lt;/a&gt;, a framework for building
&lt;a href=&quot;https://graphql.org/&quot;&gt;GraphQL&lt;/a&gt; servers in Java.
You define the types and operations implemented by a server in GraphQL schema definition language.
The framework generates code to connect GraphQL to Java types.
As an application developer, you only need to implement the business logic for the API.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This article explains how to build a GraphQL server in Java with Spring Boot.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;At &lt;a href=&quot;https://start.spring.io/&quot;&gt;Spring Initializr&lt;/a&gt;, generate a project with these options:&lt;/p&gt;
&lt;/div&gt;
&lt;table class=&quot;tableblock frame-all grid-all stretch&quot;&gt;
&lt;colgroup&gt;
&lt;col style=&quot;width: 50%;&quot;&gt;
&lt;col style=&quot;width: 50%;&quot;&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Option&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Value&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Project&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Maven Project&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Language&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Java&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Spring Boot&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;2.1.3&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Package Name&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;com.example.demo&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Java Version&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;11&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Edit the &lt;code&gt;pom.xml&lt;/code&gt; file, and add this Spring Boot starter which auto-configures a GraphQL server:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code data-lang=&quot;xml&quot; class=&quot;language-xml hljs&quot;&gt;&amp;lt;dependency&amp;gt;
  &amp;lt;groupId&amp;gt;com.github.pukkaone&amp;lt;/groupId&amp;gt;
  &amp;lt;artifactId&amp;gt;grapid-web-spring-boot-starter&amp;lt;/artifactId&amp;gt;
  &amp;lt;version&amp;gt;0.3.0&amp;lt;/version&amp;gt;
&amp;lt;/dependency&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Also add this Maven plugin which compiles GraphQL schema definition files to Java source files:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code data-lang=&quot;xml&quot; class=&quot;language-xml hljs&quot;&gt;&amp;lt;plugin&amp;gt;
  &amp;lt;groupId&amp;gt;com.github.pukkaone&amp;lt;/groupId&amp;gt;
  &amp;lt;artifactId&amp;gt;grapid-maven-plugin&amp;lt;/artifactId&amp;gt;
  &amp;lt;version&amp;gt;0.3.0&amp;lt;/version&amp;gt;
  &amp;lt;configuration&amp;gt;
    &amp;lt;packagePrefix&amp;gt;com.example.demo.graphql&amp;lt;/packagePrefix&amp;gt; &lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;
  &amp;lt;/configuration&amp;gt;
  &amp;lt;executions&amp;gt;
    &amp;lt;execution&amp;gt;
      &amp;lt;goals&amp;gt;
        &amp;lt;goal&amp;gt;compile&amp;lt;/goal&amp;gt;
      &amp;lt;/goals&amp;gt;
    &amp;lt;/execution&amp;gt;
  &amp;lt;/executions&amp;gt;
&amp;lt;/plugin&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;The compiler generates Java classes under this Java package.&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The framework enforces a convention prescribing where you put GraphQL schema definition files and
Java classes.
Create resources directory &lt;code&gt;src/main/resources/graphql/v2018_12_31/&lt;/code&gt;.
In this example, &lt;code&gt;v2018_12_31&lt;/code&gt; identifies an API version.
An API version must be a valid Java identifier and not a Java keyword.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Add this GraphQL schema definition file in the directory.
By convention, GraphQL schema definition file names end with the extension &lt;code&gt;.graphql&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Author.graphql&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code data-lang=&quot;graphql&quot; class=&quot;language-graphql hljs&quot;&gt;type Author {
  id: ID!
  name: String!
}

type Query {
  author(id: ID!): Author
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The GraphQL schema defines the root object type Query.
The compiler appends the suffix &lt;code&gt;Resolver&lt;/code&gt; to this root object type name to derive the Java class
name QueryResolver.
As an application developer, you must implement the QueryResolver class.
By convention, this class is in the Java package named &lt;em&gt;packagePrefix&lt;/em&gt;&lt;code&gt;.resolver&lt;/code&gt; where
&lt;em&gt;packagePrefix&lt;/em&gt; is the property configured in the Maven plugin.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;QueryResolver.java&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code data-lang=&quot;java&quot; class=&quot;language-java hljs&quot;&gt;package com.example.demo.graphql.resolver;

import com.example.demo.graphql.v2018_12_31.type.Author; &lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;
import org.springframework.stereotype.Component;

@Component
public class QueryResolver {

  public Author author(String id) { &lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;(2)&lt;/b&gt;
    return Author.builder()
        .id(id)
        .name(&quot;NAME&quot;)
        .build();
  }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;The compiler generated the simple Java data class Author from the GraphQL object type Author.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;2&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;The compiler translated this Java method signature from the field &lt;code&gt;author&lt;/code&gt; of the GraphQL
root object type Query.&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Run the application:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code data-lang=&quot;sh&quot; class=&quot;language-sh hljs&quot;&gt;./mvnw spring-boot:run&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In &lt;a href=&quot;https://github.com/prisma/graphql-playground&quot;&gt;GraphQL Playground&lt;/a&gt;, connect to
&lt;code&gt;&lt;a href=&quot;http://localhost:8080/graphql/v2018_12_31&quot; class=&quot;bare&quot;&gt;http://localhost:8080/graphql/v2018_12_31&lt;/a&gt;&lt;/code&gt; to send a GraphQL query to the server.&lt;/p&gt;
&lt;/div&gt;</content><author><name>Chin Huang</name></author></entry><entry><title type="html">Read Model Data In Jersey MVC JSP Templates Without “it.”</title><link href="https://pukkaone.github.io/2012/07/20/jsp-jersey-mvc-elresolver.html" rel="alternate" type="text/html" title="Read Model Data In Jersey MVC JSP Templates Without &quot;it.&quot;" /><published>2012-07-20T00:00:00-07:00</published><updated>2012-07-20T00:00:00-07:00</updated><id>https://pukkaone.github.io/2012/07/20/jsp-jersey-mvc-elresolver</id><content type="html" xml:base="https://pukkaone.github.io/2012/07/20/jsp-jersey-mvc-elresolver.html">&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Jersey, the JAX-RS reference implementation, includes an
&lt;a href=&quot;https://blogs.oracle.com/sandoz/entry/mvcj&quot;&gt;MVC framework&lt;/a&gt;
supporting the rendering of views by JSP templates.  The application passes a
model object to the framework, where the model object implements properties
providing the data to render in the JSP template.  Jersey exposes the model
object to the JSP template as a request attribute named &amp;#8220;it&amp;#8221;.  So to read a
model property, a JSP template must evaluate an EL expression reading a
property of this object, for example, &lt;code&gt;${it.propertyName}&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In Spring MVC, you don&amp;#8217;t have to write a specific prefix at the start of an EL
expression to read model data.  The model is a key-value map, and the framework
exposes every entry of the map as a request attribute.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To avoid cluttering JSP templates with &amp;#8220;it.&amp;#8221;, I wrote a
&lt;a href=&quot;https://github.com/pukkaone/webappenhance/blob/master/src/main/java/com/github/pukkaone/jsp/ViewableModelELResolver.java&quot;&gt;custom ELResolver which exposes model properties as implicit objects&lt;/a&gt;,
allowing a JSP template to read a model property with an EL expression like
&lt;code&gt;${propertyName}&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;A
&lt;a href=&quot;https://github.com/pukkaone/webappenhance/blob/master/src/main/java/com/github/pukkaone/jsp/ViewableModelELResolverListener.java&quot;&gt;custom servlet context listener&lt;/a&gt;
registers the custom ELResolver when the application starts.  To use
it, define a listener in the &lt;code&gt;web.xml&lt;/code&gt; file:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code data-lang=&quot;xml&quot; class=&quot;language-xml hljs&quot;&gt;&amp;lt;listener&amp;gt;
  &amp;lt;listener-class&amp;gt;com.github.pukkaone.jsp.ViewableModelELResolverListener&amp;lt;/listener-class&amp;gt;
&amp;lt;/listener&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;details&quot;&gt;Details&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The custom ELResolver gets the model object from the request attribute named
&amp;#8220;it&amp;#8221;, then uses reflection to resolve a name to a property of the object.
Assuming the requested property name is &lt;em&gt;key&lt;/em&gt;, the following steps are tried:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;If the object is a
&lt;a href=&quot;http://docs.oracle.com/javase/7/docs/api/java/util/Map.html&quot;&gt;Map&lt;/a&gt;,
then lookup the value from the Map using &lt;em&gt;key&lt;/em&gt; as the key.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If the object has a method named &lt;em&gt;key&lt;/em&gt; with non-void return type, then use
the return value from calling the method.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If the object has a method named `get`&lt;em&gt;key&lt;/em&gt; with the first letter of &lt;em&gt;key&lt;/em&gt;
capitalized and non-void return type, then use the return value from
calling the method.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If the object has a field named &lt;em&gt;key&lt;/em&gt;, then get the field value.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Finally, if the value acquired from the previous steps is an object implementing
&lt;a href=&quot;http://docs.oracle.com/javase/7/docs/api/java/util/concurrent/Callable.html&quot;&gt;Callable&lt;/a&gt;,
then use the return value from invoking it.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</content><author><name>Chin Huang</name></author></entry><entry><title type="html">ELResolver Escapes JSP EL Values To Prevent Cross-Site Scripting</title><link href="https://pukkaone.github.io/2011/01/03/jsp-cross-site-scripting-elresolver.html" rel="alternate" type="text/html" title="ELResolver Escapes JSP EL Values To Prevent Cross-Site Scripting" /><published>2011-01-03T00:00:00-08:00</published><updated>2011-01-03T00:00:00-08:00</updated><id>https://pukkaone.github.io/2011/01/03/jsp-cross-site-scripting-elresolver</id><content type="html" xml:base="https://pukkaone.github.io/2011/01/03/jsp-cross-site-scripting-elresolver.html">&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/Cross-site_scripting&quot;&gt;Cross-site scripting&lt;/a&gt; is a
computer security vulnerability enabling an attacker to inject malicious code
into a Web page that will be executed by the Web browser when other users view
the page.  If your Web application accepts data from the user and then outputs
that data unaltered in HTML, then it is vulnerable because user-controlled
data might contain executable code.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Since JSP 2.0, EL expressions can appear in the template text:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code data-lang=&quot;html&quot; class=&quot;language-html hljs&quot;&gt;&amp;lt;h1&amp;gt;Hello, ${user.name}&amp;lt;/h1&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Unfortunately, the JSP container does not escape expression values, so if the
expression contains user-controlled data, then cross-site scripting is
possible.  JSTL provides a couple of ways to sanitize the output.  The &lt;code&gt;c:out&lt;/code&gt;
tag escapes XML characters by default:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code data-lang=&quot;xml&quot; class=&quot;language-xml hljs&quot;&gt;&amp;lt;c:out value=&quot;${user.name}&quot;/&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Alternatively, the EL function &lt;code&gt;fn:escapeXml&lt;/code&gt; also escapes XML characters:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code data-lang=&quot;jsp&quot; class=&quot;language-jsp hljs&quot;&gt;${fn:escapeXml(user.name)}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The default option should be the safe option.  That&amp;#8217;s a sensible engineering
principle.  If EL values are escaped by default, then you&amp;#8217;re protected from
coders who forget to wrap expressions in &lt;code&gt;c:out&lt;/code&gt; or &lt;code&gt;fn:escapeXml&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Starting with JSP 2.1, a Web application can register a custom
&lt;a href=&quot;http://download.oracle.com/javaee/6/api/javax/el/ELResolver.html&quot;&gt;ELResolver&lt;/a&gt;.
I&amp;#8217;m going to present a
&lt;a href=&quot;https://github.com/pukkaone/webappenhance/blob/master/src/main/java/com/github/pukkaone/jsp/EscapeXmlELResolver.java&quot;&gt;custom ELResolver that escapes EL values&lt;/a&gt;,
allowing you to use EL in JSPs while preventing cross-site scripting.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;A
&lt;a href=&quot;https://github.com/pukkaone/webappenhance/blob/master/src/main/java/com/github/pukkaone/jsp/EscapeXmlELResolverListener.java&quot;&gt;custom servlet context listener&lt;/a&gt;
registers the custom ELResolver when the application starts.  To use
it, define a listener in the &lt;code&gt;web.xml&lt;/code&gt; file:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code data-lang=&quot;xml&quot; class=&quot;language-xml hljs&quot;&gt;&amp;lt;listener&amp;gt;
  &amp;lt;listener-class&amp;gt;com.github.pukkaone.jsp.EscapeXmlELResolverListener&amp;lt;/listener-class&amp;gt;
&amp;lt;/listener&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;disable-escaping&quot;&gt;Disable Escaping&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;When you register this custom ELResolver, all EL values will be escaped by
default.  If you want a JSP to programmatically output HTML, you can resort to
a
&lt;a href=&quot;http://download.oracle.com/javaee/5/tutorial/doc/bnaou.html&quot;&gt;JSP scriptlet&lt;/a&gt;
or
&lt;a href=&quot;http://download.oracle.com/javaee/5/tutorial/doc/bnaov.html&quot;&gt;JSP expression&lt;/a&gt;,
unless the application configured &lt;code&gt;scripting-invalid&lt;/code&gt; to &lt;code&gt;true&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Another way uses a custom tag to surround JSP code in which EL values should
not be escaped:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code data-lang=&quot;jsp&quot; class=&quot;language-jsp hljs&quot;&gt;&amp;lt;%@ taglib prefix=&quot;enhance&quot; uri=&quot;http://pukkaone.github.com/jsp&quot; %&amp;gt;

&amp;lt;enhance:out escapeXml=&quot;false&quot;&amp;gt;
  I hope this expression returns safe HTML: ${user.name}
&amp;lt;/enhance:out&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The &lt;code&gt;escapeXml&lt;/code&gt; attribute is &lt;code&gt;true&lt;/code&gt; by default.  You must explicitly set it to
&lt;code&gt;false&lt;/code&gt; in the tag to disable escaping.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;details&quot;&gt;Details&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The servlet context listener&amp;#8217;s &lt;code&gt;contextInitialized&lt;/code&gt; method calls the
&lt;a href=&quot;http://download.oracle.com/javaee/6/api/javax/servlet/jsp/JspApplicationContext.html#addELResolver(javax.el.ELResolver)&quot;&gt;JspApplicationContext.addELResolver&lt;/a&gt;
method to register the custom ELResolver.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code data-lang=&quot;java&quot; class=&quot;language-java hljs&quot;&gt;    public void contextInitialized(ServletContextEvent event) {
        JspFactory.getDefaultFactory()
                .getJspApplicationContext(event.getServletContext())
                .addELResolver(new EscapeXmlELResolver());
    }&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The &lt;code&gt;addELResolver&lt;/code&gt; method inserts the custom ELResolver into a chain of
standard resolvers.  When evaluating an expression, the JSP container consults
the chain of resolvers in the following order, stopping at the first resolver
to succeed:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;ImplicitObjectELResolver&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;ELResolvers registered by the addELResolver method.&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;MapELResolver&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ListELResolver&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ArrayELResolver&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;BeanELResolver&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ScopedAttributeELResolver&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This presents a slight problem because the custom ELResolver wants to escape
the value that would have resulted from consulting the chain.  When asked for a
value, the custom ELResolver invokes the chain of resolvers.  The custom
ELResolver is itself in the chain of resolvers, so before invoking the chain,
it sets a flag telling itself to do nothing when its turn in the chain comes
around.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code data-lang=&quot;java&quot; class=&quot;language-java hljs&quot;&gt;    private boolean gettingValue;

    @Override
    public Object getValue(ELContext context, Object base, Object property)
        throws NullPointerException, PropertyNotFoundException, ELException
    {
        if (gettingValue) {
            return null;
        }

        gettingValue = true;
        Object value = context.getELResolver().getValue(
                context, base, property);
        gettingValue = false;

        if (value instanceof String) {
            value = EscapeXml.escape((String) value);
        }
        return value;
    }&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;There&amp;#8217;s a resolver in the chain before the custom ELResolver.  This resolver,
ImplicitObjectELResolver, will be invoked twice.  First, before reaching the
custom ELResolver, and again when the custom ELResolver invokes the chain.
Multiple invocations of ImplicitObjectELResolver is harmless because
ImplicitObjectELResolver had to fail in order for the custom ELResolver to be
invoked.  When the custom ELResolver invokes the chain, the
ImplicitObjectELResolver will fail again.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;A resolver indicates success by setting the &lt;code&gt;propertyResolved&lt;/code&gt; property of the
&lt;code&gt;ELContext&lt;/code&gt; to &lt;code&gt;true&lt;/code&gt;.  When consulting the chain, one of the resolvers very
likely set this property to &lt;code&gt;true&lt;/code&gt;, so no other resolvers are invoked after
returning from the custom ELResolver.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</content><author><name>Chin Huang</name></author></entry><entry><title type="html">Compile JSPs On Application Startup</title><link href="https://pukkaone.github.io/2010/12/22/jsp-precompile-application-start.html" rel="alternate" type="text/html" title="Compile JSPs On Application Startup" /><published>2010-12-22T00:00:00-08:00</published><updated>2010-12-22T00:00:00-08:00</updated><id>https://pukkaone.github.io/2010/12/22/jsp-precompile-application-start</id><content type="html" xml:base="https://pukkaone.github.io/2010/12/22/jsp-precompile-application-start.html">&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The first request to a JSP typically has a processing delay as the JSP
container compiles the JSP.  Specifically, the container generates Java source
code for a servlet and compiles the source code to a class file.  You can
prevent your users from experiencing this delay by compiling the JSPs before
they are requested.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The &lt;a href=&quot;http://tomcat.apache.org/tomcat-6.0-doc/jasper-howto.html#Web_Application_Compilation&quot;&gt;Tomcat manual&lt;/a&gt;
describes how to compile JSPs at build time.  An Ant target runs the Japser JSP
Engine to convert JSPs to servlet code.  Another Ant target compiles the
servlet code to class files.  Servlet declarations and mappings for the
generated servlets must be merged into the &lt;code&gt;web.xml&lt;/code&gt; file.  I&amp;#8217;m going to
present another solution that compiles JSPs when the application starts.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The JSP specification says a container must accept the request parameter
&lt;code&gt;jsp_precompile&lt;/code&gt; on a request to a JSP.  The parameter can have values &lt;code&gt;true&lt;/code&gt;
or &lt;code&gt;false&lt;/code&gt;, or no value at all.  If the parameter has value &lt;code&gt;true&lt;/code&gt; or no value,
then it is a suggestion to the container to compile the JSP.  Even if container
chooses to ignore this suggestion, it must not let the page process the
request.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;A
&lt;a href=&quot;https://github.com/pukkaone/webappenhance/blob/master/src/main/java/com/github/pukkaone/jsp/JspCompileListener.java&quot;&gt;custom servlet context listener&lt;/a&gt;
compiles all JSPs in the Web application when the application starts.  To use
it, define a listener in the &lt;code&gt;web.xml&lt;/code&gt; file:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code data-lang=&quot;xml&quot; class=&quot;language-xml hljs&quot;&gt;&amp;lt;listener&amp;gt;
  &amp;lt;listener-class&amp;gt;com.github.pukkaone.jsp.JspCompileListener&amp;lt;/listener-class&amp;gt;
&amp;lt;/listener&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;details&quot;&gt;Details&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The &lt;code&gt;JspCompileListener&lt;/code&gt; class implements the
&lt;a href=&quot;http://download.oracle.com/javaee/6/api/javax/servlet/ServletContextListener.html&quot;&gt;ServletContextListener&lt;/a&gt;
interface so it receives a notification when the Web application starts.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code data-lang=&quot;java&quot; class=&quot;language-java hljs&quot;&gt;public class JspCompileListener implements ServletContextListener {
    private ServletContext servletContext;
    private HttpServletRequest request = createHttpServletRequest();
    private HttpServletResponse response = createHttpServletResponse();&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The &lt;code&gt;contextInitialized&lt;/code&gt; method receives a notification when the application
starts.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code data-lang=&quot;java&quot; class=&quot;language-java hljs&quot;&gt;    public void contextInitialized(ServletContextEvent event) {
        servletContext = event.getServletContext();

        compileJspsInDirectory(&quot;/&quot;);
    }&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The &lt;code&gt;compileJspsInDirectory&lt;/code&gt; method finds and compiles all JSPs in a directory.
It recursively descends into subdirectories and processes JSPs found there.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code data-lang=&quot;java&quot; class=&quot;language-java hljs&quot;&gt;    @SuppressWarnings(&quot;unchecked&quot;)
    private void compileJspsInDirectory(String dirPath) {
        Set&amp;lt;String&amp;gt; paths = servletContext.getResourcePaths(dirPath);
        for (String path : paths) {
            if (path.endsWith(&quot;.jsp&quot;)) {
                RequestDispatcher requestDispatcher =
                        servletContext.getRequestDispatcher(path);
                if (requestDispatcher == null) {
                    // Should have gotten a RequestDispatcher for the path
                    // because the path came from the getResourcePaths() method.
                    throw new Error(path + &quot; not found&quot;);
                }

                try {
                    servletContext.log(&quot;Compiling &quot; + path);
                    requestDispatcher.include(request, response);
                } catch (Exception e) {
                    servletContext.log(&quot;include&quot;, e);
                }
            } else if (path.endsWith(&quot;/&quot;)) {
                // Recursively process subdirectories.
                compileJspsInDirectory(path);
            }
        }
    }&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The call to the
&lt;a href=&quot;http://download.oracle.com/javaee/6/api/javax/servlet/RequestDispatcher.html#include(javax.servlet.ServletRequest,%20javax.servlet.ServletResponse&quot;&gt;RequestDispatcher.include&lt;/a&gt;
method sends a request to a JSP.  One of the arguments must be a
&lt;a href=&quot;http://download.oracle.com/javaee/6/api/javax/servlet/http/HttpServletRequest.html&quot;&gt;HttpServletRequest&lt;/a&gt;
implementation that returns &lt;code&gt;jsp_precompile&lt;/code&gt; for the query string.  I could
have written a class providing stub implementations for the HttpServletRequest
methods, but the interface has so many methods that the code to create a
&lt;a href=&quot;http://download.oracle.com/javase/6/docs/api/java/lang/reflect/Proxy.html&quot;&gt;JDK dynamic proxy&lt;/a&gt;
implementing the interface is more concise.  Another JDK dynamic proxy
implements the
&lt;a href=&quot;http://download.oracle.com/javaee/6/api/javax/servlet/http/HttpServletResponse.html&quot;&gt;HttpServletResponse&lt;/a&gt;
interface in a similar fashion.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code data-lang=&quot;java&quot; class=&quot;language-java hljs&quot;&gt;    private HttpServletRequest createHttpServletRequest() {
        InvocationHandler handler = new InvocationHandler() {
            public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {
                if (method.getName().equals(&quot;getQueryString&quot;)) {
                    return &quot;jsp_precompile&quot;;
                }
                return null;
            }
        };

        return (HttpServletRequest) Proxy.newProxyInstance(
                getClass().getClassLoader(),
                new Class&amp;lt;?&amp;gt;[] { HttpServletRequest.class },
                handler);
    }&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</content><author><name>Chin Huang</name></author></entry><entry><title type="html">Build Number From Git Repository</title><link href="https://pukkaone.github.io/2010/12/19/build-number-git-repository.html" rel="alternate" type="text/html" title="Build Number From Git Repository" /><published>2010-12-19T00:00:00-08:00</published><updated>2010-12-19T00:00:00-08:00</updated><id>https://pukkaone.github.io/2010/12/19/build-number-git-repository</id><content type="html" xml:base="https://pukkaone.github.io/2010/12/19/build-number-git-repository.html">&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;A build number is an identifying number assigned to a software release.  The
software displays the build number to the user in some fashion, such as in an
About dialog.  Subsequent releases should have increasing build numbers (but
the build numbers don&amp;#8217;t have to be contiguous), so you can say to a customer,
&quot;If you have build number &lt;strong&gt;N&lt;/strong&gt; or higher, then you have the fix to that bug.&quot;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;A commit to &lt;a href=&quot;http://subversion.apache.org/&quot;&gt;Subversion&lt;/a&gt; increments the
repository revision number which identifies the state of the repository after
applying the changes.  If your source code is in Subversion, an obvious choice
for the build number is the repository revision number checked out to build the
release.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Deriving a build number from &lt;a href=&quot;http://git-scm.com/&quot;&gt;Git&lt;/a&gt; is not so obvious.  The
SHA-1 hash Git uses to identify each commit does not have a naturally ordering.
You can&amp;#8217;t tell just by looking at the SHA-1 hashes of two commits which commit
comes after the other.  So using the SHA-1 hash as the build number doesn&amp;#8217;t
make sense.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I&amp;#8217;m going to outline a scheme using the
&lt;a href=&quot;http://www.kernel.org/pub/software/scm/git/docs/git-describe.html&quot;&gt;git describe&lt;/a&gt;
command, which counts how many commits are traversed to reach a tag.  Create a
tag pointing to some commit in the history.  A likely candidate is the first
commit in the repository.  The build number is the number of commits between
the current commit and the tag.  To guarantee an increasing build number, all
these conditions must be satisfied:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;Make all releases from the same Git repository.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Make all releases from the same branch.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Do not rewrite history.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Create a tag named &lt;code&gt;build&lt;/code&gt; pointing to the first commit in the repository:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;literalblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre&gt;% git tag -a -m &quot;For calculating build number&quot; build `git rev-list HEAD | tail -1`&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The &lt;code&gt;git describe&lt;/code&gt; command by default searches to the nearest tag.  Use the
&lt;code&gt;--match&lt;/code&gt; option to specify the tag name.  Trying the command, you see your
build script needs to extract the build number from the output (&lt;code&gt;12&lt;/code&gt; in the
example):&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;literalblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre&gt;% git describe --match build
build-12-g53e5502&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This &lt;a href=&quot;http://ant.apache.org/&quot;&gt;Ant&lt;/a&gt; task extracts the build number into the
&lt;code&gt;BUILD_NUMBER&lt;/code&gt; property:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code data-lang=&quot;xml&quot; class=&quot;language-xml hljs&quot;&gt;&amp;lt;exec executable=&quot;git&quot; outputproperty=&quot;BUILD_NUMBER&quot;&amp;gt;
  &amp;lt;arg value=&quot;describe&quot;/&amp;gt;
  &amp;lt;arg value=&quot;--match&quot;/&amp;gt;
  &amp;lt;arg value=&quot;build&quot;/&amp;gt;
  &amp;lt;redirector&amp;gt;
    &amp;lt;outputfilterchain&amp;gt;
      &amp;lt;tokenfilter&amp;gt;
        &amp;lt;replaceregex pattern=&quot;^[^-]+-&quot; replace=&quot;&quot;/&amp;gt;
        &amp;lt;replaceregex pattern=&quot;-.+$&quot; replace=&quot;&quot;/&amp;gt;
      &amp;lt;/tokenfilter&amp;gt;
   &amp;lt;/outputfilterchain&amp;gt;
 &amp;lt;/redirector&amp;gt;
&amp;lt;/exec&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This &lt;a href=&quot;http://cmake.org/&quot;&gt;CMake&lt;/a&gt; script parses the build number into the
&lt;code&gt;BUILD_NUMBER&lt;/code&gt; variable:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code data-lang=&quot;cmake&quot; class=&quot;language-cmake hljs&quot;&gt;find_package(Git)
if(GIT_FOUND)
    execute_process(
            COMMAND ${GIT_EXECUTABLE} describe --match build
            OUTPUT_VARIABLE DESCRIBE_BUILD
            OUTPUT_STRIP_TRAILING_WHITESPACE)
    string(REGEX MATCH &quot;[0-9]+&quot; BUILD_NUMBER ${DESCRIBE_BUILD})
endif()&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;</content><author><name>Chin Huang</name></author></entry></feed>